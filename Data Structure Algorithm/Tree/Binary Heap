class binaryheap:
    def __init__(self):
        self.heap = [0]
        self.size = 0

    def insert(self, k):
        self.heap.append(k)
        self.size += 1
        i = len(self.heap) - 1
        while i != 1:
            if self.heap[i // 2] > self.heap[i]:
                self.swap(i, i // 2)
            else:
                break
            i = i // 2

    def findmin(self):
        return self.heap[1]

    def pop(self):
        self.swap(1, len(self.heap) - 1)
        i = 1
        while 2 * i + 1 <= len((self.heap)) - 2:
            if self.heap[i] <= self.heap[2*i] and self.heap[i] <= self.heap[2*i + 1]:
                break
            elif self.heap[2*i] <= self.heap[2*i + 1]:
                self.swap(i, 2*i)
                i = 2 * i
            else:
                self.swap(i, 2 * i + 1)
                i = 2 * i + 1
        return self.heap.pop()

    def swap(self, a, b):
        k = self.heap[a]
        self.heap[a] = self.heap[b]
        self.heap[b] = k

a = binaryheap()

a.heap += [1,2,3,4,5,6,7,8,9]
print(a.heap)
a.insert(4)
print(a.heap)
a.pop()
print(a.heap)
a.pop()
print(a.heap)
