def quick(arr):
    if len(arr) == 0 or len(arr) == 1:
        return arr
    pivot = 0
    left = 1
    right = len(arr) - 1
    while left <= right:
        if arr[left] <= arr[pivot]:
            left += 1
            continue
        if arr[right] > arr[pivot]:
            right -= 1
            continue
        swap(arr, left, right)
    swap(arr, pivot, right)
    arr = quick(arr[:right]) + [arr[right]] + quick(arr[right + 1:])
    return arr

def swap(arr, a, b):
    temp = arr[a]
    arr[a] = arr[b]
    arr[b] = temp
    return arr


print(quick([1,3,5,1,3,2,5,8,9,12,13,15,11,12]))

## Most effcient sorting algorithm human knows, but worst case time complexity -> O(n**2) average(nlogn)
